// =============================================
// SISTEMA DE ESTRATIFICA√á√ÉO - VERS√ÉO COMPLETA
// =============================================

// --- VARI√ÅVEIS GLOBAIS ---
let bairros = [];
let estado = {
    bairroSelecionado: null,
    quadrasDisponiveis: [],
    quadrasSelecionadas: new Set(),
  quadrasPositivas: new Set(), // ‚úÖ novo
};

// --- ELEMENTOS DO DOM ---
const selectBairro = document.getElementById("bairro");
const resumoGeralDiv = document.getElementById("resumoGeral");
const listaQuadrasDiv = document.getElementById("listaQuadras");
const resumoProgramadosDiv = document.getElementById("resumoProgramados");
const entradaQuadras = document.getElementById("entradaQuadras");
const aplicarTextoBtn = document.getElementById("aplicarTexto");
const limparTudoBtn = document.getElementById("limparTudo");
const dadosDetalhesDiv = document.getElementById("dadosDetalhes");

// --- FUN√á√ïES PRINCIPAIS ---

// 1. CARREGAR DADOS E PREENCHER BAIRROS
function carregarDados() {
    fetch('bairros_4ciclo_2025.json')
        .then(response => {
            if (!response.ok) throw new Error('Erro ao carregar dados');
            return response.json();
        })
        .then(data => {
            bairros = data;
            preencherListaBairros();
            console.log('Dados carregados:', bairros.length, 'registros');
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Erro ao carregar dados. Verifique o console para detalhes.');
        });
}

// 2. PREENCHER LISTA DE BAIRROS
function preencherListaBairros() {
    if (!selectBairro) return;
    
    selectBairro.innerHTML = '<option value="">-- Escolha um bairro --</option>';
    
    const bairrosUnicos = [...new Set(bairros.map(item => item.BAIRRO))].sort();
    
    bairrosUnicos.forEach(bairro => {
        const option = document.createElement("option");
        option.value = bairro;
        option.textContent = bairro;
        selectBairro.appendChild(option);
    });
}

// 3. MONTAR RESUMO GERAL DO BAIRRO (COM TODOS OS DADOS)
function montarResumoGeral() {
    if (!resumoGeralDiv) return;

    const bairroNome = estado.bairroSelecionado;
    if (!bairroNome) {
        resumoGeralDiv.innerHTML = "";
        return;
    }

    const dadosBairro = bairros.filter(b => b.BAIRRO === bairroNome);

    if (dadosBairro.length === 0) {
        resumoGeralDiv.innerHTML = "<em>Nenhum dado encontrado para este bairro.</em>";
        return;
    }

    // 1) quadras √∫nicas (string trimmed)
    const quadrasUnicas = [...new Set(dadosBairro.map(item => String(item.QT).trim()))];

    // 2) quadras ativas = existem e TOTAL > 0
    const quadrasAtivas = quadrasUnicas.filter(qt => {
        const row = dadosBairro.find(b => String(b.QT).trim() === qt);
        const total = Number(row?.TOTAL);
        return !isNaN(total) && total > 0;
    });

    // 3) totais (mant√©m sua fun√ß√£o existente)
    const totais = calcularTotaisBairro(dadosBairro);
    const totalProgramados = (totais.TOTAL || 0) - (totais["AP. ACIMA DO T√âRREO"] || 0);

    resumoGeralDiv.innerHTML = `
        <div class="small"><strong>Bairro:</strong> ${bairroNome}</div>
        <span><strong>Total de Quadras (ativas):</strong> ${quadrasAtivas.length}</span>
        <span><strong>Total de Im√≥veis:</strong> ${totais.TOTAL}</span>
        <span><strong>Resid√™ncias (R):</strong> ${totais.R}</span>
        <span><strong>Com√©rcios (C):</strong> ${totais.C}</span>
        <span><strong>Terrenos Baldios (TB):</strong> ${totais.TB}</span>
        <span><strong>Outros (OU):</strong> ${totais.OU}</span>
        <span><strong>Pontos Estrat√©gicos (PE):</strong> ${totais.PE}</span>
        <span><strong>Apartamentos Acima T√©rreo:</strong> ${totais["AP. ACIMA DO T√âRREO"] || 0}</span>
        <span><strong>Total de Habitantes:</strong> ${totais.HABITANTES}</span>
        <span><strong>üè† Im√≥veis Programados:</strong> ${totalProgramados}</span>
        <span><strong>üêï C√£es:</strong> ${totais.C√ÉO}</span>
        <span><strong>üêà Gatos:</strong> ${totais.GATO}</span>
    `;
}




// 4. CALCULAR TOTAIS COMPLETOS DO BAIRRO
function calcularTotaisBairro(dadosBairro) {
    const campos = [
        'R', 'C', 'TB', 'OU', 'PE', 'TOTAL', 'APARTAMENTO EXISTENTE',
        'APARTAMENTO NO T√âRREO', 'AP. ACIMA DO T√âRREO', 'HABITANTES',
        'TANQUE EXISTENTE', 'TANQUE PEIXADO', 'TAMBOR EXISTENTE', 'TAMBOR PEIXADO',
        'CISTERNA EXISTENTE', 'CISTERNA VEDADA', 'CISTERNA PEIXADA',
        'CACIMBA EXISTENTE', 'CACIMBA VEDADA', 'CACIMBA PEIXADA',
        "CAIXAS D'√ÅGUA EXISTENTE", "CAIXAS D'√ÅGUA NORMAL", "CAIXAS D'√ÅGUA VEDADA",
        "CAIXAS D'√ÅGUA ED. NORMAL", "CAIXAS D'√ÅGUA ED. VEDADA",
        'FILTRO', 'VASO C/ PLANTA', 'POTE', 'TINA', 'C√ÉO', 'GATO'
    ];
    
    const totais = {};
    
    campos.forEach(campo => {
        totais[campo] = dadosBairro.reduce((total, item) => {
            let valor = item[campo];

            // Se for string num√©rica, converte
            if (typeof valor === "string") {
                valor = valor.trim();
                valor = valor === "" ? 0 : Number(valor);
            }

            // Se n√£o for n√∫mero v√°lido, ignora (considera 0)
            if (isNaN(valor)) valor = 0;

            return total + valor;
        }, 0);
    });
    
    return totais;
}


// 5. MONTAR LISTA DE QUADRAS COM DETALHES
// === FUN√á√ÉO: MONTAR LISTA DE QUADRAS ===
function montarListaQuadras() {
    if (!listaQuadrasDiv) return;

    listaQuadrasDiv.innerHTML = "";

    if (!estado.bairroSelecionado) {
        listaQuadrasDiv.innerHTML = "<em>Selecione um bairro primeiro.</em>";
        return;
    }

    const dadosBairro = bairros.filter(b => b.BAIRRO === estado.bairroSelecionado);

    // pega todas as quadras e aplica a ordena√ß√£o pai/filho
    const quadras = [...new Set(dadosBairro.map(item => item.QT))].sort((a, b) => {
        const [paiA, filhoA] = a.split("/").map(Number);
        const [paiB, filhoB] = b.split("/").map(Number);

        if (paiA !== paiB) return paiA - paiB;
        if (filhoA == null && filhoB != null) return -1;
        if (filhoA != null && filhoB == null) return 1;
        if (filhoA != null && filhoB != null) return filhoA - filhoB;
        return 0;
    });

    estado.quadrasDisponiveis = quadras.filter(q => {
        const dadosQuadra = dadosBairro.find(b => b.QT === q);
        return dadosQuadra && Number(dadosQuadra.TOTAL) > 0;
    });

    if (quadras.length === 0) {
        listaQuadrasDiv.innerHTML = "<em>Nenhuma quadra encontrada.</em>";
        return;
    }

    quadras.forEach(quadra => {
        const dadosQuadra = dadosBairro.find(b => b.QT === quadra);
        const somaTotal = Number(dadosQuadra?.TOTAL || 0);
        const isExtinta = somaTotal === 0;

        const wrapper = document.createElement("div");
        wrapper.className = "quadra-item";

        // === Checkbox normal ===
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.value = quadra;
        checkbox.id = `quadra-${quadra}`;

        if (isExtinta) {
            checkbox.disabled = true;
        } else {
            checkbox.checked = Array.from(estado.quadrasSelecionadas).includes(quadra);

            checkbox.addEventListener("change", () => {
                if (checkbox.checked) {
                    estado.quadrasSelecionadas.add(quadra);
                } else {
                    estado.quadrasSelecionadas.delete(quadra);
                    estado.quadrasPositivas.delete(quadra);
                }
                atualizarProgramados();
                atualizarQuadrasSelecionadas();
                atualizarQuadrasPositivas();
            });
        }

        // === Checkbox positiva ===
        const checkboxPositivo = document.createElement("input");
        checkboxPositivo.type = "checkbox";
        checkboxPositivo.value = quadra;
        checkboxPositivo.id = `positivo-${quadra}`;
        checkboxPositivo.style.marginLeft = "10px";

        const labelPositivo = document.createElement("label");
        labelPositivo.htmlFor = checkboxPositivo.id;
        labelPositivo.textContent = "Positiva";
        labelPositivo.style.marginLeft = "4px";
        labelPositivo.style.fontSize = "0.85em";
        labelPositivo.style.color = "#ccc";

        checkboxPositivo.disabled = !estado.quadrasSelecionadas.has(quadra);
        checkboxPositivo.checked = estado.quadrasPositivas.has(quadra);

        checkboxPositivo.addEventListener("change", () => {
            if (checkboxPositivo.checked) {
                estado.quadrasPositivas.add(quadra);
            } else {
                estado.quadrasPositivas.delete(quadra);
            }
            atualizarQuadrasPositivas();
        });

        checkbox.addEventListener("change", () => {
            checkboxPositivo.disabled = !checkbox.checked;
            if (!checkbox.checked) {
                checkboxPositivo.checked = false;
                estado.quadrasPositivas.delete(quadra);
                atualizarQuadrasPositivas();
            }
        });

        // === Label da quadra ===
        const label = document.createElement("label");
        label.htmlFor = checkbox.id;

        if (isExtinta) {
            label.innerHTML = `<span class="extinta">${quadra} (extinta)</span>`;
        } else {
            label.innerHTML = `<span class="quadra-numero">${quadra}</span> <small>(${somaTotal} im√≥veis)</small>`;
            wrapper.classList.add("destacada"); // aplica destaque a todas ativas
        }

        wrapper.appendChild(checkbox);
        wrapper.appendChild(label);
        wrapper.appendChild(checkboxPositivo);
        wrapper.appendChild(labelPositivo);
        listaQuadrasDiv.appendChild(wrapper);
    });
}



// === FUN√á√ÉO: MOSTRAR APENAS QUADRAS SELECIONADAS ===
function atualizarQuadrasSelecionadas() {
    const textarea = document.getElementById("quadrasEstratificadas");
    const detalhesDiv = document.getElementById("dadosDetalhes");

    if (estado.quadrasSelecionadas.size === 0) {
        textarea.value = "";
        detalhesDiv.innerHTML = "";
        return;
    }

    // mant√©m s√≥ quadras v√°lidas do bairro e que n√£o sejam extintas
    const quadrasValidas = Array.from(estado.quadrasSelecionadas).filter(q => {
        const dados = bairros.find(b => b.BAIRRO === estado.bairroSelecionado && b.QT === q);
        return dados && Number(dados.TOTAL) > 0;
    });

    textarea.value = quadrasValidas.join(", ");
    detalhesDiv.innerHTML = "";
}



// 6. ATUALIZAR RESUMO DE PROGRAMADOS COMPLETO
function atualizarProgramados() {
    const resumoProgramados = document.getElementById("resumoProgramados");

    if (!estado.bairroSelecionado) {
        resumoProgramados.innerHTML = "<em>Selecione um bairro para ver os programados.</em>";
        return;
    }

    const dadosBairro = bairros.filter(b => b.BAIRRO === estado.bairroSelecionado);

    // quadras selecionadas ativas (sem extintas)
    const quadrasSelecionadasAtivas = Array.from(estado.quadrasSelecionadas).filter(q => {
        const dadosQuadra = dadosBairro.find(b => b.QT === q);
        return dadosQuadra && Number(dadosQuadra.TOTAL) > 0;
    });

    const totalQuadrasSelecionadas = quadrasSelecionadasAtivas.length;

    const totalImoveis = dadosBairro.reduce((acc, cur) => acc + Number(cur.IMOVEIS || 0), 0);
    const residencias = dadosBairro.reduce((acc, cur) => acc + Number(cur.R || 0), 0);
    const comercios = dadosBairro.reduce((acc, cur) => acc + Number(cur.C || 0), 0);
    const terrenos = dadosBairro.reduce((acc, cur) => acc + Number(cur.TB || 0), 0);
    const outros = dadosBairro.reduce((acc, cur) => acc + Number(cur.OU || 0), 0);
    const pontosEstrategicos = dadosBairro.reduce((acc, cur) => acc + Number(cur.PE || 0), 0);
    const apartamentos = dadosBairro.reduce((acc, cur) => acc + Number(cur.AP || 0), 0);
    const habitantes = dadosBairro.reduce((acc, cur) => acc + Number(cur.HAB || 0), 0);
    const caes = dadosBairro.reduce((acc, cur) => acc + Number(cur.CAES || 0), 0);
    const gatos = dadosBairro.reduce((acc, cur) => acc + Number(cur.GATOS || 0), 0);
    const depositos = dadosBairro.reduce((acc, cur) => acc + Number(cur.DEPOSITOS || 0), 0);

    // programados = s√≥ das quadras ativas
    const imoveisProgramados = dadosBairro
        .filter(b => quadrasSelecionadasAtivas.includes(b.QT))
        .reduce((acc, cur) => acc + Number(cur.IMOVEIS || 0), 0);

    resumoProgramados.innerHTML = `
        <span><strong>Quadras Selecionadas:</strong> ${totalQuadrasSelecionadas}</span>
        <span><strong>Total de Im√≥veis:</strong> ${totalImoveis}</span>
        <span><strong>Resid√™ncias (R):</strong> ${residencias}</span>
        <span><strong>Com√©rcios (C):</strong> ${comercios}</span>
        <span><strong>Terrenos Baldios (TB):</strong> ${terrenos}</span>
        <span><strong>Outros (OU):</strong> ${outros}</span>
        <span><strong>Pontos Estrat√©gicos (PE):</strong> ${pontosEstrategicos}</span>
        <span><strong>Apartamentos Acima T√©rreo:</strong> ${apartamentos}</span>
        <span><strong>Total de Habitantes:</strong> ${habitantes}</span>
        <span>üè† <strong>Im√≥veis Programados:</strong> ${imoveisProgramados}</span>
        <span>üêï <strong>C√£es:</strong> ${caes}</span>
        <span>üêà <strong>Gatos:</strong> ${gatos}</span>
        <span>üíß <strong>Dep√≥sitos de √Ågua:</strong> ${depositos}</span>
    `;
}

// 7. CALCULAR TOTAIS DAS QUADRAS SELECIONADAS
function calcularTotaisQuadrasSelecionadas(dadosBairro) {
    const campos = [
        'R', 'C', 'TB', 'OU', 'PE', 'TOTAL', 'AP. ACIMA DO T√âRREO', 'HABITANTES',
        'TANQUE EXISTENTE', 'TAMBOR EXISTENTE', 'CISTERNA EXISTENTE', 'CACIMBA EXISTENTE',
        "CAIXAS D'√ÅGUA EXISTENTE", 'C√ÉO', 'GATO'
    ];
    
    const totais = {};
    campos.forEach(campo => totais[campo] = 0);
    
    estado.quadrasSelecionadas.forEach(quadra => {
        const dadosQuadra = dadosBairro.find(b => b.QT === quadra);
        if (dadosQuadra) {
            campos.forEach(campo => {
                let valor = dadosQuadra[campo];

                if (typeof valor === "string") {
                    valor = valor.trim();
                    valor = valor === "" ? 0 : Number(valor);
                }

                if (isNaN(valor)) valor = 0;

                totais[campo] += valor;
            });
        }
    });
    
    return totais;
}
function atualizarQuadrasPositivas() {
    const textarea = document.getElementById("quadrasPositivas");
    textarea.value = Array.from(estado.quadrasPositivas).join(", ");
}

function limparTudo() {
    estado.bairroSelecionado = null;
    estado.quadrasSelecionadas.clear();
    estado.quadrasPositivas.clear(); // ‚úÖ limpa positivas tamb√©m

    // limpa campos da tela
    document.getElementById("quadrasEstratificadas").value = "";
    document.getElementById("quadrasPositivas").value = ""; // ‚úÖ limpa textarea
    document.getElementById("dadosDetalhes").innerHTML = "";

    // atualiza telas
    montarListaQuadras();
    montarResumoGeral();
    atualizarProgramados();
}

// 8. MOSTRAR DETALHES DAS QUADRAS SELECIONADAS
function mostrarDetalhesQuadras() {
    if (!dadosDetalhesDiv) return;
    
    if (estado.quadrasSelecionadas.size === 0) {
        dadosDetalhesDiv.innerHTML = "";
        return;
    }
    
    const dadosBairro = bairros.filter(b => b.BAIRRO === estado.bairroSelecionado);
    let detalhes = "üü¢ QUADRAS SELECIONADAS:\n\n";
    
    estado.quadrasSelecionadas.forEach(quadra => {
        const dados = dadosBairro.find(b => b.QT === quadra);
        if (dados) {
            detalhes += `üìç Quadra ${quadra}:\n`;
            detalhes += `   ‚Ä¢ Im√≥veis: ${dados.TOTAL}\n`;
            detalhes += `   ‚Ä¢ Habitantes: ${dados.HABITANTES}\n`;
            detalhes += `   ‚Ä¢ PE: ${dados.PE}\n`;
            detalhes += `   ‚Ä¢ C√£es: ${dados.C√ÉO}, Gatos: ${dados.GATO}\n`;
            detalhes += `   ‚Ä¢ Dep√≥sitos √°gua: ${dados["CAIXAS D'√ÅGUA EXISTENTE"] + dados.TANQUE_EXISTENTE + dados.TAMBOR_EXISTENTE}\n\n`;
        }
    });
    
    dadosDetalhesDiv.innerHTML = detalhes;
}

// 9. INTERPRETAR ENTRADA DE TEXTO PARA QUADRAS
// === FUN√á√ÉO: INTERPRETAR ENTRADA DE TEXTO PARA QUADRAS ===
function interpretarEntrada(texto) {
    const partes = texto.split(/[\s,;]+/).filter(Boolean);
    const selecionadas = new Set();

    partes.forEach(parte => {
        if (/^\d+-\d+$/.test(parte)) {
            // intervalo de quadras (ex: 1-10)
            const [inicio, fim] = parte.split("-").map(Number);
            if (!isNaN(inicio) && !isNaN(fim)) {
                for (let i = inicio; i <= fim; i++) {
                    selecionadas.add(String(i));
                    // tamb√©m adiciona filhos se existirem
                    estado.quadrasDisponiveis.forEach(q => {
                        if (q.startsWith(i + "/")) {
                            selecionadas.add(q);
                        }
                    });
                }
            }
        } else {
            // quadra √∫nica
            selecionadas.add(parte);
            // tamb√©m adiciona filhos se existirem
            estado.quadrasDisponiveis.forEach(q => {
                if (q.startsWith(parte + "/")) {
                    selecionadas.add(q);
                }
            });
        }
    });

    return selecionadas;
}


// 10. LIMPAR TUDO
function limparTudo() {
    estado.bairroSelecionado = null;
    estado.quadrasSelecionadas.clear();
    estado.quadrasDisponiveis = [];
    
    if (selectBairro) selectBairro.value = "";
    if (entradaQuadras) entradaQuadras.value = "";
    if (resumoGeralDiv) resumoGeralDiv.innerHTML = "";
    if (listaQuadrasDiv) listaQuadrasDiv.innerHTML = "";
    if (resumoProgramadosDiv) resumoProgramadosDiv.innerHTML = "<em>Selecione quadras para ver os programados.</em>";
    if (dadosDetalhesDiv) dadosDetalhesDiv.innerHTML = "";
}

// --- INICIALIZA√á√ÉO ---
document.addEventListener("DOMContentLoaded", function() {
    console.log("Sistema de estratifica√ß√£o inicializando...");

 carregarDados();

if (selectBairro) {
    selectBairro.addEventListener("change", function() {
        estado.bairroSelecionado = this.value;
        estado.quadrasSelecionadas.clear();

        montarResumoGeral();          // ‚úÖ atualiza o painel de resumo
        montarListaQuadras();
        atualizarProgramados();
        atualizarQuadrasSelecionadas(); // ‚úÖ s√≥ mostra a numera√ß√£o
    });
}

if (aplicarTextoBtn && entradaQuadras) {
    aplicarTextoBtn.addEventListener("click", function() {
        if (!estado.bairroSelecionado) {
            alert("Selecione um bairro primeiro!");
            return;
        }

        const texto = entradaQuadras.value;
        const quadrasSelecionadas = interpretarEntrada(texto);

        estado.quadrasSelecionadas = quadrasSelecionadas;
        montarListaQuadras();
        atualizarProgramados();
        atualizarQuadrasSelecionadas(); // ‚úÖ s√≥ mostra a numera√ß√£o
    });
}

if (limparTudoBtn) {
    limparTudoBtn.addEventListener("click", limparTudo);
}

console.log("Sistema inicializado com sucesso!");
}); // ‚úÖ fechamento do DOMContentLoaded

























